"use client";

// src/PersistQueryClientProvider.tsx
import * as React from "react";
import {
  persistQueryClientRestore,
  persistQueryClientSubscribe
} from "@tanstack/query-persist-client-core";
import { IsRestoringProvider, QueryClientProvider } from "@tanstack/react-query";
import { jsx } from "react/jsx-runtime";
var PersistQueryClientProvider = ({
  client,
  children,
  persistOptions,
  onSuccess,
  ...props
}) => {
  const [isRestoring, setIsRestoring] = React.useState(true);
  const refs = React.useRef({ persistOptions, onSuccess });
  const didRestore = React.useRef(false);
  React.useEffect(() => {
    refs.current = { persistOptions, onSuccess };
  });
  React.useEffect(() => {
    const options = {
      ...refs.current.persistOptions,
      queryClient: client
    };
    if (!didRestore.current) {
      didRestore.current = true;
      persistQueryClientRestore(options).then(async () => {
        try {
          await refs.current.onSuccess?.();
        } finally {
          setIsRestoring(false);
        }
      });
    }
    return isRestoring ? void 0 : persistQueryClientSubscribe(options);
  }, [client, isRestoring]);
  return /* @__PURE__ */ jsx(QueryClientProvider, { client, ...props, children: /* @__PURE__ */ jsx(IsRestoringProvider, { value: isRestoring, children }) });
};
export {
  PersistQueryClientProvider
};
//# sourceMappingURL=PersistQueryClientProvider.js.map